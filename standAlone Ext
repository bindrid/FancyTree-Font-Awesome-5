/*!
 * jquery.fancytree.awesome5.js
 *
 * Use awesome5 svg as instead of icon sprites.
 * (Extension module for jquery.fancytree.js: https://github.com/mar10/fancytree/)
 *
 * Released under the MIT license
 * https://github.com/mar10/fancytree/wiki/LicenseInfo
 *
 * @date 2018-01-26
 */

;(function( factory ) {
	if ( typeof define === "function" && define.amd ) {
		// AMD. Register as an anonymous module.
		define( [ "jquery", "./jquery.fancytree" ], factory );
	} else if ( typeof module === "object" && module.exports ) {
		// Node/CommonJS
		require("./jquery.fancytree");
		module.exports = factory(require("jquery"));
	} else {
		// Browser globals
		factory( jQuery );
	}

}( function( $ ) {

"use strict";

/* *****************************************************************************
 * Private functions and variables
 */

var FT = $.ui.fancytree,
	PRESETS = {

		"default": {
			// fontawesome 5 have several different base classes
			// "far, fas, fal and fab" The rendered svg puts that prefix
			// in a different location so we have to keep them separate here

			_addClass: "",
			checkbox: function (ctx, span, baseClass, opts, type) { return '<i class="far fa-square"></i>' },
		    checkboxSelected: '<i class="far fa-check-square"></i>',
		    checkboxUnknown: '<i class="far fa-square"></i>',
		    dragHelper:'<i class="far fa-arrow-right"></i>',
		    dropMarker: '<i class="far fa-long-arrow-alt-right"></i>',
		    error: '<i class="fas fa-exclamation-triangle" style="color:red"></i>',
		    //expanderClosed: {
		    //    prefix: "fas", base: "fa-angle-right", style: "background:MistyRose", "transform": "up-6", mask: "fa-square",
		    //    text: { text: "RO", base: "fa-layers-text fa-inverse", transform: "shrink-11.5 rotate--30" }
		    //},
		    expanderLazy: '<i class="fas fa-angle-right fa-lg" style="color:#0056b3"></i>',
		    expanderClosed: '<i class="fas fa-angle-right fa-lg" style="color:#0056b3"></i>',
		    expanderOpen: '<i class="fas fa-angle-down fa-lg" style="color:#0056b3"></i>',
		    loading: '<i class="fas fa-spinner fa-spin"></i>',
		    nodata: '<i class="far fa-question-circle"></i>',
		    noExpander: "",
		    radio: '<i class="far fa-circle"></i>',
		    radioSelected: '<i class="far fa-dot-circle"></i>',
		    // radioUnknown: "fa-dot-circle-o",
		    // Default node icons.
		    // (Use tree.options.icon callback to define custom icons based on node data)
		    doc: '<i class="far fa-file"></i>',
		    docOpen: '<i class="far fa-file-alt"></i>',
		    folder: '<i class="far fa-folder"></i>',
		    folderOpen:'<i class="far fa-folder-open"></i>'
		}

	};

function isFunction(functionToCheck) {
	var getType = {};
	return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
}

	/**
	* Function: setIcon
	* Notes: This version was set up to run with Font Awesome 5 (svg/script mode).
	* Depending on Awesome 5 configuration, it may or may not consume the node
	* when converted to svg so its put in a container so it will work either way.
	* 
	* In my css, I added .fa-icon-container{pointer-events:none} so that I would
    * not have to add an event handler to trigger an event in the parent span.
    * @param ctx FancyTree object with tree/node etc
	* @param span : specific span to be acted on.
	* @param baseClass css class for the span to be acted on.
	* @param opts used for this extension as set by the current instance of FancyTree 
	* @param type action type such as checkboxSelected;
	**/
function setIcon(ctx, span, baseClass, opts, type) {
	
    var map = opts.map, $i,
		icon = map[type],
		$span = $(span),
        $svg = $span.find(">span.fa-icon-container");
        
    if ($svg.length > 0) {
        $svg.remove();
    }
    if (typeof (icon) === "string") {
       var fa =  $('<span class="fa-icon-container">' + icon + '</span>');
       $span.prepend(fa);
    }
    else if (isFunction(icon)) {
    	$span.prepend('<span class="fa-icon-container">' + icon(ctx, span, baseClass, opts, type) + '</span>');
    }

}

$.ui.fancytree.registerExtension({
	name: "awesome5",
	version: "0.1.0",
	// Default options for this extension.
	options: {
		preset: null,  // 'awesome3', 'awesome4', 'bootstrap3', 'material'
		map: {
		}
	},

	treeInit: function(ctx){
		var tree = ctx.tree,
			opts = ctx.options.awesome5;

		if( opts.preset ) {
			FT.assert( !!PRESETS[opts.preset],
				"Invalid value for `options.awesome5.preset`: " + opts.preset);
			opts.map = $.extend({}, PRESETS[opts.preset], opts.map);
		} else {
		    // use default 
		    opts.map = $.extend({}, PRESETS["default"], opts.map);
		}
		this._superApply(arguments);
		tree.$container.addClass("fancytree-ext-awesome5");
	},
	nodeRenderStatus: function (ctx) {
	
		var checkbox, icon, res, span, cbspan,
			node = ctx.node,
			$span = $( node.span ),
			opts = ctx.options.awesome5;

		res = this._super(ctx);

		if( node.isRoot() ){
			return res;
		}
		span = $span.children("span.fancytree-expander").get(0);
		if( span ){
			// if( node.isLoading() ){
				// icon = "loading";
			if( node.expanded && node.hasChildren() ){
				icon = "expanderOpen";
			}else if( node.isUndefined() ){
				icon = "expanderLazy";
			}else if( node.hasChildren() ){
				icon = "expanderClosed";
			}else{
				icon = "noExpander";
			}
			// span.className = "fancytree-expander " + map[icon];
			setIcon(ctx, span, "fancytree-expander", opts, icon );
		}

		if( node.tr ){
			cbspan = $("td", node.tr).find("span.fancytree-checkbox").get(0);
		}else{
			cbspan = $span.children("span.fancytree-checkbox").get(0);
		}
		if( cbspan ) {
			checkbox = FT.evalOption("checkbox", node, node, opts, false);
			if( (node.parent && node.parent.radiogroup ) || checkbox === "radio" ) {
				icon = node.selected ? "radioSelected" : "radio";
				setIcon(ctx, cbspan, "fancytree-checkbox fancytree-radio", opts, icon );
			} else {
				icon = node.selected ? "checkboxSelected" : (node.partsel ? "checkboxUnknown" : "checkbox");
				// span.className = "fancytree-checkbox " + map[icon];
				setIcon(ctx, cbspan, "fancytree-checkbox", opts, icon );
			}
		}

		// Standard icon (note that this does not match .fancytree-custom-icon,
		// that might be set by opts.icon callbacks)
		span = $span.children("span.fancytree-icon").get(0);
		if( span ){
			if( node.statusNodeType ){
				icon = node.statusNodeType; // loading, error
			}else if( node.folder ){
				icon = ( node.expanded && node.hasChildren() ) ? "folderOpen" : "folder";
			}else{
				icon = node.expanded ? "docOpen" : "doc";
			}
			setIcon(ctx, span, "fancytree-icon", opts, icon );
		}
		return res;
	},
	nodeSetStatus: function (ctx, status, message, details) {

		var res, span,
			opts = ctx.options.awesome5,
			node = ctx.node;

		res = this._superApply(arguments);

		if( status === "error" || status === "loading" || status === "nodata" ){
			if(node.parent){
				span = $("span.fancytree-expander", node.span).get(0);
				if( span ) {
					setIcon(ctx, span, "fancytree-expander", opts, status );
				}
			}else{ //
				span = $(".fancytree-statusnode-" + status, node[this.nodeContainerAttrName])
					.find("span.fancytree-icon").get(0);
				if( span ) {
					setIcon(ctx, span, "fancytree-icon", opts, status );
				}
			}
		}
		return res;
	}
});
// Value returned by `require('jquery.fancytree..')`
return $.ui.fancytree;
}));  // End of closure
